{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["Answer","props","Grid","container","spacing","item","xs","Radio","checked","selected","onChange","handleChange","id","value","name","shortText","inputProps","Typography","variant","longText","Answers","React","useState","setValue","answers","map","x","i","Fragment","Question","q","question","classes","makeStyles","theme","root","padding","flexGrow","cover","textAlign","number","color","palette","getContrastText","secondary","light","backgroundColor","useStyles","className","Paper","Avatar","num","title","description","App","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","type","typography","h5","fontWeight","h6","blabla","qs","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAAe,I,sFCyBf,SAASA,EAAOC,GAQd,OACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,QAASP,EAAMQ,SACfC,SAAU,kBAAIT,EAAMU,aAAaV,EAAMW,KACvCC,MAAOZ,EAAMW,GACbE,KAAMb,EAAMc,UACZC,WAAY,CAAE,aAAc,SAGhC,cAACd,EAAA,EAAD,CAAMG,MAAI,EAACF,WAAS,EAACG,GAAI,GAAzB,SACE,eAACJ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,UACE,cAACW,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACGjB,EAAMc,YAET,cAACE,EAAA,EAAD,UACGhB,EAAMkB,mBAUnB,SAASC,EAAQnB,GAAO,MAKIoB,IAAMC,SAAS,YALnB,mBAKfT,EALe,KAKRU,EALQ,KAOhBZ,EAAe,SAACC,GACpBW,EAASX,IAGLY,EAAUvB,EAAMuB,QAAQC,KAAI,SAACC,EAAEC,GAAH,OAChC,cAAC3B,EAAD,CAAgBe,UAAWW,EAAEX,UAAWI,SAAUO,EAAEP,SAAUP,GAAIc,EAAEd,GAAIH,SAAUI,IAAQa,EAAEd,GAC1FD,aAAcA,GADHgB,MAIf,OACI,cAAC,IAAMC,SAAP,UACGJ,IAKT,SAASK,EAAS5B,GAGhB,IAAM6B,EAAI7B,EAAM8B,SAuBVC,EArBYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAASF,EAAM9B,QAAQ,GACvBiC,SAAU,GAEZC,MAAO,CACLF,QAASF,EAAM9B,QAAQ,GACvBmC,UAAW,QAGbf,QAAS,CACPY,QAASF,EAAM9B,QAAQ,GACvBmC,UAAW,QAGbC,OAAQ,CACNC,MAAOP,EAAMQ,QAAQC,gBAAgBT,EAAMQ,QAAQE,UAAUC,OAC7DC,gBAAiBZ,EAAMQ,QAAQE,UAAUC,UAI7BE,GAEhB,OACE,qBAAKC,UAAWhB,EAAQG,KAAxB,SACE,cAACc,EAAA,EAAD,CAAOD,UAAWhB,EAAQM,MAA1B,SACE,eAACpC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAAC4C,EAAA,EAAD,CAAQF,UAAWhB,EAAQQ,OAA3B,SAAoCV,EAAEqB,QAExC,eAACjD,EAAA,EAAD,CAAMG,MAAI,EAACF,WAAS,EAACG,GAAI,GAAzB,UACE,eAACJ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,UACE,cAACW,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACGY,EAAEsB,QAEL,cAACnC,EAAA,EAAD,UACGa,EAAEuB,iBAGP,cAACnD,EAAA,EAAD,CAAMG,MAAI,EAAC2C,UAAWhB,EAAQR,QAASlB,GAAI,GAA3C,SACE,cAACc,EAAD,CAASI,QAASM,EAAEN,sBAkGnB8B,MAzFf,WAEE,IAAMC,EAAkBC,YAAc,gCAEhCtB,EAAQb,IAAMoC,SAClB,kBACEC,YAAe,CACbhB,QAAS,CACPiB,KAAMJ,EAAkB,OAAS,SAEnCK,WAAY,CACVC,GAAI,CACFC,WAAY,KAEdC,GAAI,CACFD,WAAY,UAIpB,CAACP,IAWGS,GARY/B,aAAW,SAACC,GAAD,MAAY,CACvC/B,UAAW,CACTiC,QAASF,EAAM9B,QAAQ,QAMZ,ojBA8CT6D,EA5Ca,CACC,CACEd,IAAK,EAAGC,MAAO,qBAAsBC,YAAYW,EACjDxC,QAAS,CACP,CAAEZ,GAAG,EAAGG,UAAW,OAAQI,SAAU,wRACrC,CAAEP,GAAG,EAAGG,UAAW,OAAQI,SAAU,0RACrC,CAAEP,GAAG,EAAGG,UAAW,MAAOI,SAAU,0RACpC,CAAEP,GAAG,EAAGG,UAAW,MAAOI,SAAU,4RAExC,CACEgC,IAAK,EAAGC,MAAO,mBAAoBC,YAAYW,EAC/CxC,QAAS,CACP,CAAEZ,GAAG,EAAGG,UAAW,OAAQI,SAAU,wRACrC,CAAEP,GAAG,EAAGG,UAAW,OAAQI,SAAU,0RACrC,CAAEP,GAAG,EAAGG,UAAW,MAAOI,SAAU,0RACpC,CAAEP,GAAG,EAAGG,UAAW,MAAOI,SAAU,4RAExC,CACEgC,IAAK,EAAGC,MAAO,qBAAsBC,YAAYW,EACjDxC,QAAS,CACP,CAAEZ,GAAG,EAAGG,UAAW,OAAQI,SAAU,wRACrC,CAAEP,GAAG,EAAGG,UAAW,OAAQI,SAAU,0RACrC,CAAEP,GAAG,EAAGG,UAAW,MAAOI,SAAU,0RACpC,CAAEP,GAAG,EAAGG,UAAW,MAAOI,SAAU,4RAExC,CACEgC,IAAK,EAAGC,MAAO,sBAAuBC,YAAYW,EAClDxC,QAAS,CACP,CAAEZ,GAAG,EAAGG,UAAW,OAAQI,SAAU,wRACrC,CAAEP,GAAG,EAAGG,UAAW,OAAQI,SAAU,0RACrC,CAAEP,GAAG,EAAGG,UAAW,MAAOI,SAAU,0RACpC,CAAEP,GAAG,EAAGG,UAAW,MAAOI,SAAU,4RAExC,CACEgC,IAAK,EAAGC,MAAO,gBAAiBC,YAAYW,EAC5CxC,QAAS,CACP,CAAEZ,GAAG,EAAGG,UAAW,OAAQI,SAAU,wRACrC,CAAEP,GAAG,EAAGG,UAAW,OAAQI,SAAU,0RACrC,CAAEP,GAAG,EAAGG,UAAW,MAAOI,SAAU,0RACpC,CAAEP,GAAG,EAAGG,UAAW,MAAOI,SAAU,6RAKvCM,KAAI,SAACC,EAAEC,GAAH,OAAO,cAACE,EAAD,CAAUE,SAAUL,GAAQC,MAE5D,OAEE,8BACE,eAACuC,EAAA,EAAD,CAAehC,MAAOA,EAAtB,UACA,cAACiC,EAAA,EAAD,IACGF,QChNMG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5006d238.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\n//import './App.css';\n\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport Icon from '@material-ui/core/Icon';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport React from 'react';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { green, orange } from '@material-ui/core/colors';\nimport Grid from '@material-ui/core/Grid';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport Paper from '@material-ui/core/Paper';\nimport Avatar from '@material-ui/core/Avatar';\nimport FormControl from '@material-ui/core/FormControl';\nimport { BluetoothDisabledSharp } from '@material-ui/icons';\n\n\nfunction Answer(props) {\n\n// props.shortText\n// props.long\n// props.selected\n// props.id\n// props.handleChange\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={1}>\n        <Radio\n          checked={props.selected}\n          onChange={()=>props.handleChange(props.id)}\n          value={props.id}\n          name={props.shortText}\n          inputProps={{ 'aria-label': 'A' }}\n        />        \n      </Grid>\n      <Grid item container xs={11}>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\">\n            {props.shortText}\n          </Typography>\n          <Typography>\n            {props.longText}\n          </Typography>\n        </Grid>\n      </Grid>\n    </Grid>\n\n  );\n\n}\n\nfunction Answers(props) {\n\n  // props.answers = [answer1, ..]\n  // answer {id, shortText, longText}\n\n  const [value, setValue] = React.useState('selected');\n\n  const handleChange = (id) => {\n    setValue(id);\n  };\n\n  const answers = props.answers.map((x,i) => \n    <Answer key={i} shortText={x.shortText} longText={x.longText} id={x.id} selected={value===x.id}\n      handleChange={handleChange}\n    />);\n\n  return (\n      <React.Fragment>\n        {answers}\n      </React.Fragment>\n  );\n}\n\nfunction Question(props) {\n  \n  // props.question { title, description, answers = [{shortText, longText}, ..]}\n  const q = props.question;\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      padding: theme.spacing(3),\n      flexGrow: 1,\n    },\n    cover: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      \n    },\n    answers: {\n      padding: theme.spacing(2),\n      textAlign: 'left',\n      \n    },\n    number: {\n      color: theme.palette.getContrastText(theme.palette.secondary.light),\n      backgroundColor: theme.palette.secondary.light,\n    },\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.cover}>\n        <Grid container spacing={3}>\n          <Grid item xs={1}>\n            <Avatar className={classes.number}>{q.num}</Avatar>\n          </Grid>\n          <Grid item container xs={11}>\n            <Grid item xs={12}>\n              <Typography variant=\"h5\">\n                {q.title}\n              </Typography>\n              <Typography>\n                {q.description}\n              </Typography>\n            </Grid>\n            <Grid item className={classes.answers} xs={12}>\n              <Answers answers={q.answers}/>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Paper>\n    </div>\n  );\n}\n\nfunction App() {\n\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n        typography: {\n          h5: {\n            fontWeight: 700,\n          },\n          h6: {\n            fontWeight: 700,\n          },\n        },        \n      }),\n    [prefersDarkMode],\n  );\n\n  const useStyles = makeStyles((theme) => ({\n    container: {\n      padding: theme.spacing(3),\n    },\n    \n  }));\n\n// props.question { title, description, answers = [answer1, ..]}\n  const blabla = \"In CSS, a margin is the space around an element's border, while padding is the space between an element's border and the element's content. Put another way, the margin property controls the space outside an element, and the padding property controls the space inside an element <br/>In CSS, a margin is the space around an element's border, while padding is the space between an element's border and the element's content. Put another way, the margin property controls the space outside an element, and the padding property controls the space inside an element\"\n\n  const questions  = [\n                      {\n                        num: 1, title: \"Whats the question\", description:blabla, \n                        answers: [\n                          { id:1, shortText: \"Fish\", longText: \"In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                          { id:2, shortText: \"Bird\", longText: \"b-In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                          { id:3, shortText: \"Dog\", longText: \"c-In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                          { id:4, shortText: \"Cat\", longText: \"d-In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                      ]},\n                      {\n                        num: 2, title: \"Another question\", description:blabla, \n                        answers: [\n                          { id:1, shortText: \"Fish\", longText: \"In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                          { id:2, shortText: \"Bird\", longText: \"b-In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                          { id:3, shortText: \"Dog\", longText: \"c-In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                          { id:4, shortText: \"Cat\", longText: \"d-In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                      ]},\n                      {\n                        num: 3, title: \"And a bloody third\", description:blabla, \n                        answers: [\n                          { id:1, shortText: \"Fish\", longText: \"In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                          { id:2, shortText: \"Bird\", longText: \"b-In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                          { id:3, shortText: \"Dog\", longText: \"c-In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                          { id:4, shortText: \"Cat\", longText: \"d-In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                      ]},\n                      {\n                        num: 4, title: \"The show must go on\", description:blabla, \n                        answers: [\n                          { id:1, shortText: \"Fish\", longText: \"In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                          { id:2, shortText: \"Bird\", longText: \"b-In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                          { id:3, shortText: \"Dog\", longText: \"c-In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                          { id:4, shortText: \"Cat\", longText: \"d-In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                      ]},\n                      {\n                        num: 5, title: \"Und so weiter\", description:blabla, \n                        answers: [\n                          { id:1, shortText: \"Fish\", longText: \"In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                          { id:2, shortText: \"Bird\", longText: \"b-In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                          { id:3, shortText: \"Dog\", longText: \"c-In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                          { id:4, shortText: \"Cat\", longText: \"d-In the example below, a button is styled to look like a typical close button, with an X in the middle. Since there is nothing indicating that the purpose of the button is to close the dialog, the aria-label attribute is used to provide the label to any assistive technologies.\"},\n                      ]},\n                    ];\n\n\n  const qs = questions.map((x,i)=><Question question={x} key={i}/>);\n  \n  return (\n\n    <div >\n      <ThemeProvider theme={theme}>\n      <CssBaseline />\n        {qs}\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}